// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"benchmark/rest/storage/gorm/model"
)

func newTaskTag(db *gorm.DB, opts ...gen.DOOption) taskTag {
	_taskTag := taskTag{}

	_taskTag.taskTagDo.UseDB(db, opts...)
	_taskTag.taskTagDo.UseModel(&model.TaskTag{})

	tableName := _taskTag.taskTagDo.TableName()
	_taskTag.ALL = field.NewAsterisk(tableName)
	_taskTag.TaskID = field.NewString(tableName, "task_id")
	_taskTag.Tag = field.NewString(tableName, "tag")

	_taskTag.fillFieldMap()

	return _taskTag
}

type taskTag struct {
	taskTagDo taskTagDo

	ALL    field.Asterisk
	TaskID field.String
	Tag    field.String

	fieldMap map[string]field.Expr
}

func (t taskTag) Table(newTableName string) *taskTag {
	t.taskTagDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskTag) As(alias string) *taskTag {
	t.taskTagDo.DO = *(t.taskTagDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskTag) updateTableName(table string) *taskTag {
	t.ALL = field.NewAsterisk(table)
	t.TaskID = field.NewString(table, "task_id")
	t.Tag = field.NewString(table, "tag")

	t.fillFieldMap()

	return t
}

func (t *taskTag) WithContext(ctx context.Context) ITaskTagDo { return t.taskTagDo.WithContext(ctx) }

func (t taskTag) TableName() string { return t.taskTagDo.TableName() }

func (t taskTag) Alias() string { return t.taskTagDo.Alias() }

func (t *taskTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskTag) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["task_id"] = t.TaskID
	t.fieldMap["tag"] = t.Tag
}

func (t taskTag) clone(db *gorm.DB) taskTag {
	t.taskTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskTag) replaceDB(db *gorm.DB) taskTag {
	t.taskTagDo.ReplaceDB(db)
	return t
}

type taskTagDo struct{ gen.DO }

type ITaskTagDo interface {
	gen.SubQuery
	Debug() ITaskTagDo
	WithContext(ctx context.Context) ITaskTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskTagDo
	WriteDB() ITaskTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskTagDo
	Not(conds ...gen.Condition) ITaskTagDo
	Or(conds ...gen.Condition) ITaskTagDo
	Select(conds ...field.Expr) ITaskTagDo
	Where(conds ...gen.Condition) ITaskTagDo
	Order(conds ...field.Expr) ITaskTagDo
	Distinct(cols ...field.Expr) ITaskTagDo
	Omit(cols ...field.Expr) ITaskTagDo
	Join(table schema.Tabler, on ...field.Expr) ITaskTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskTagDo
	Group(cols ...field.Expr) ITaskTagDo
	Having(conds ...gen.Condition) ITaskTagDo
	Limit(limit int) ITaskTagDo
	Offset(offset int) ITaskTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskTagDo
	Unscoped() ITaskTagDo
	Create(values ...*model.TaskTag) error
	CreateInBatches(values []*model.TaskTag, batchSize int) error
	Save(values ...*model.TaskTag) error
	First() (*model.TaskTag, error)
	Take() (*model.TaskTag, error)
	Last() (*model.TaskTag, error)
	Find() ([]*model.TaskTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskTag, err error)
	FindInBatches(result *[]*model.TaskTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TaskTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskTagDo
	Assign(attrs ...field.AssignExpr) ITaskTagDo
	Joins(fields ...field.RelationField) ITaskTagDo
	Preload(fields ...field.RelationField) ITaskTagDo
	FirstOrInit() (*model.TaskTag, error)
	FirstOrCreate() (*model.TaskTag, error)
	FindByPage(offset int, limit int) (result []*model.TaskTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t taskTagDo) Debug() ITaskTagDo {
	return t.withDO(t.DO.Debug())
}

func (t taskTagDo) WithContext(ctx context.Context) ITaskTagDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskTagDo) ReadDB() ITaskTagDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskTagDo) WriteDB() ITaskTagDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskTagDo) Session(config *gorm.Session) ITaskTagDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskTagDo) Clauses(conds ...clause.Expression) ITaskTagDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskTagDo) Returning(value interface{}, columns ...string) ITaskTagDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskTagDo) Not(conds ...gen.Condition) ITaskTagDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskTagDo) Or(conds ...gen.Condition) ITaskTagDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskTagDo) Select(conds ...field.Expr) ITaskTagDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskTagDo) Where(conds ...gen.Condition) ITaskTagDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskTagDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITaskTagDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t taskTagDo) Order(conds ...field.Expr) ITaskTagDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskTagDo) Distinct(cols ...field.Expr) ITaskTagDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskTagDo) Omit(cols ...field.Expr) ITaskTagDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskTagDo) Join(table schema.Tabler, on ...field.Expr) ITaskTagDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskTagDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskTagDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskTagDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskTagDo) Group(cols ...field.Expr) ITaskTagDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskTagDo) Having(conds ...gen.Condition) ITaskTagDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskTagDo) Limit(limit int) ITaskTagDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskTagDo) Offset(offset int) ITaskTagDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskTagDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskTagDo) Unscoped() ITaskTagDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskTagDo) Create(values ...*model.TaskTag) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskTagDo) CreateInBatches(values []*model.TaskTag, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskTagDo) Save(values ...*model.TaskTag) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskTagDo) First() (*model.TaskTag, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskTag), nil
	}
}

func (t taskTagDo) Take() (*model.TaskTag, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskTag), nil
	}
}

func (t taskTagDo) Last() (*model.TaskTag, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskTag), nil
	}
}

func (t taskTagDo) Find() ([]*model.TaskTag, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskTag), err
}

func (t taskTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskTag, err error) {
	buf := make([]*model.TaskTag, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskTagDo) FindInBatches(result *[]*model.TaskTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskTagDo) Attrs(attrs ...field.AssignExpr) ITaskTagDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskTagDo) Assign(attrs ...field.AssignExpr) ITaskTagDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskTagDo) Joins(fields ...field.RelationField) ITaskTagDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskTagDo) Preload(fields ...field.RelationField) ITaskTagDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskTagDo) FirstOrInit() (*model.TaskTag, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskTag), nil
	}
}

func (t taskTagDo) FirstOrCreate() (*model.TaskTag, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskTag), nil
	}
}

func (t taskTagDo) FindByPage(offset int, limit int) (result []*model.TaskTag, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskTagDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskTagDo) Delete(models ...*model.TaskTag) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskTagDo) withDO(do gen.Dao) *taskTagDo {
	t.DO = *do.(*gen.DO)
	return t
}
